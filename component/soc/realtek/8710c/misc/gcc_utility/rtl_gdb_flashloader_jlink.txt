# GDB script for flash download

#===============================================================================
#set GDB connection 
set remotetimeout 100000
set pagination off
target remote :2331


#===============================================================================
#set JTAG and external SRAM
monitor reset 1
monitor sleep 20
monitor clrbp

#===============================================================================
#not a version, then will use wdt reset to reset peripherals and cpu will park at ram start
set $VER = (({int}0x400001F0) >> 4) & 0xF
printf "VER: %x\n",$VER
if ($VER != 0x0)
	printf "WDT RESET\n"
	set $REASON = ({int}0x400000F4) | 0x4
	set {int}0x400000F4 = $REASON
	set {int}0x10000480=0
	set {int}0x40002800 = 0x42A50001
	monitor sleep 2000
	monitor reset 1
	monitor sleep 20
	monitor clrbp
	set $REASON = $REASON & ~0x4
	set {int}0x400000F4 = $REASON
end

#===============================================================================
#Variables declaration (1)
#binary file size

set $SECTOR_SIZE = 0x1000

source fwinfo.gdb
printf "-------------------------------\n"
printf "FirmwareSize: %x\n",$FirmwareSize
printf "-------------------------------\n"

#===============================================================================
#Load flashloader
file ../../../component/soc/realtek/8710c/misc/iar_utility/flashloader/FlashRTL8710c.out

#Load the file
lo

printf "Load flash controller.\n"

#===============================================================================
set $FLASHDATBUFSIZE = (int)&FlashBufferEnd - (int)&FlashBufferStart

printf "FLASHDATBUFSIZE = %x\n", $FLASHDATBUFSIZE
printf "FlashBufferEnd = %x\n", &FlashBufferEnd
printf "FlashBufferStart = %x\n", &FlashBufferStart
#===============================================================================


#===============================================================================
#Download firmware
#=============================================================================== 

#reset
monitor reset 3
monitor halt

#set break at FlashBreak
b FlashBreak

#set PC and SP
set $INIT_SP = {int}&__vector_table
set $INIT_PC = {int}(&__vector_table+4)

#set VTOR
set {int}0xe000ed08 = &__vector_table
#fast boot off
set {int}0x10000480 = &gRamStartFun

printf "INIT_SP = %x INIT_PC = %x\n", $INIT_SP, $INIT_PC
set $sp = $INIT_SP
set $pc = $INIT_PC

set {int}(&theFlashParams.base_ptr) = 0x98000000
set {int}(&theFlashParams.block_size) = $FirmwareSize
set {int}(&theFlashParams.offset_into_block) = 0
set {int}(&theFlashParams.count) = 0
set {int}(&theFlashParams.buffer) = &FlashBufferStart

# continue
continue

printf "Flash Init done, start flash erase/write\n" 

set {int}&g_image_size = $FirmwareSize
# To Enable debug logs on Flash loader
# set {int}&g_debug_enable = 1
printf "image size = %x debug = %x\n", {int}&g_image_size, {int}&g_debug_enable

set $ReadPtr = 0
Set $ReadEndPtr = $ReadPtr + $FLASHDATBUFSIZE
set $LoopCnt = 0
set $Offset = 0

set $LoopNum = ($FirmwareSize + $FLASHDATBUFSIZE - 1) / $FLASHDATBUFSIZE
printf "LoopNum = %x\n", $LoopNum
printf "LoopNum Old = %x\n", $FirmwareSize / $FLASHDATBUFSIZE

set $TailSize = ($FirmwareSize % $FLASHDATBUFSIZE)
printf "TailSize = %x\n", $TailSize  

while  ($LoopCnt < $LoopNum)
		set $ProcSize = $FLASHDATBUFSIZE
		if ($LoopCnt == ($LoopNum-1))
			set $ProcSize = $TailSize
		end
		
		if ($ProcSize == 0)
			set $ProcSize = $FLASHDATBUFSIZE
		end
		
		#printf "Proc Size %x\n", $ProcSize
		#printf "LoopCnt %x\n", $LoopCnt
		#printf "LoopNum %x\n", $LoopNum
		
		#erase flash, fill erase buffer
		set $EraseNum = ($ProcSize + $SECTOR_SIZE - 1)/$SECTOR_SIZE
		set $EraseCnt = 0
		
		while ( $EraseCnt < $EraseNum )
			set {int}(&FlashBufferStart+$EraseCnt*2+0) = {int}(&theFlashParams.base_ptr) + 0x1000*$EraseCnt
			set {int}(&FlashBufferStart+$EraseCnt*2+1) = 0x1000
			set $EraseCnt = $EraseCnt + 1
		end
		
		set {int}(&theFlashParams.block_size) = 0
		set {int}(&theFlashParams.buffer) = &FlashBufferStart
		set {int}(&theFlashParams.count) = $EraseNum
		set $pc = &FlashEraseWriteEntry
		c
		
		#write flash
		#restore $FirmwareName binary &FlashBufferStart $ReadPtr $ReadEndPtr
		source restore.gdb

		set {int}(theFlashParams.offset_into_block) = $Offset
		set {int}(&theFlashParams.count) = $ProcSize
		set {int}(&theFlashParams.buffer) = &FlashBufferStart
		set $pc = &FlashWriteEntry
		c
    
		#update parameter
		set $ReadPtr = $ReadEndPtr
		set $ReadEndPtr =  $ReadPtr + $ProcSize
    
		set {int}(&theFlashParams.base_ptr) = {int}(&theFlashParams.base_ptr) + $ProcSize
		set $Offset = $Offset + $ProcSize
    
		set $LoopCnt = $LoopCnt + 0x01
end
printf "Flash Download done, exist\n" 
quit